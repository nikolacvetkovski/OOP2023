#include <iostream>

using namespace std;

class Array {
private:
    int *content;
    int capacity;
    int n;

public:
    Array(int capacity = 10) {
        this->capacity = capacity;
        this->n = 0;
        this->content = new int[this->capacity];
    }

    Array(const Array &other) {
        this->capacity = other.capacity;
        this->n = other.n;
        this->content = new int[other.capacity];

        for(int i=0; i<other.n; i++) {
            this->content[i] = other.content[i];
        }
    }

    Array &operator = (const Array &other) {
        if(this != &other) {
            delete[] content;

            this->capacity = other.capacity;
            this->n = other.n;
            this->content = new int[other.capacity];

            for(int i=0; i<other.n; i++) {
                this->content[i] = other.content[i];
            }
        }
        return *this;
    }

    ~Array() {
        delete[] content;
    }

    Array &operator += (int number) {
        if(capacity > n) {
            content[n++] = number;
        }

        else {
            capacity *= 2;
            int *temp = new int[capacity];

            for(int i=0; i<n; i++) {
                temp[i] = content[i];
            }
            temp[n++] = number;
            delete[] content;
            content = temp;
        }
        return *this;
    }

    Array &operator -= (int number) {
        int j=0;
        for(int i=0; i<n; i++) {
            if(content[i] != number) {
                content[j++] = content[i];
            }
        }
        this->n = j;
        return *this;
    }

    friend ostream &operator << (ostream &out, const Array &other) {
        out << "Capacity: " << other.capacity << endl;
        out << "Size: " << other.n << endl;
        out << "Percentage filled: " << (100.0 * other.n) / other.capacity << "%" << endl;

        for(int i=0; i<other.n; i++) {
            out<<other.content[i]<<' ';
        }

        out<<endl;
        return out;
    }

    friend istream &operator >> (istream &in, Array &other) {
        in >> other.capacity;
        return in;
    }

    int &operator[] (int index) {
        return content[index];
    }

    bool operator == (Array &other) {
        if(this->n != other.n) {
            return false;
        }
        for(int i=0; i<n; i++) {
            if(this->content[i] != other.content[i]) {
                return false;
            }
        }
        return true;
    }
};

int main()
{
    Array a;
    cin>>a;
    cout<<a;

    for(int i=1; i<=10; i++) {
        a += i;
    }
    cout << "-----------------" << endl;
    cout << a;

    cout << "-----------------" << endl;
    a += 5;
    cout<<a;

    cout << "-----------------" << endl;
    for(int i=0; i<10; i++) {
        a += i;
    }
    cout<<a;

    cout << "-----------------" << endl;
    a -= 5;
    cout<<a;

    cout << "-----------------" << endl;
    a[3] = 200;
    cout<<a;

    cout << "-----------------" << endl;
    Array a1(a);
    cout<<(a == a1)<<endl;
    a1[0] = 1000;
    cout<<a1;
    cout<<(a == a1);

    return 0;
}
