#include <iostream>
#include <cstring>

using namespace std;

class Product {
protected:
    char name[30];
    float price;

public:
    Product(char *name = "", float price = 0.0) {
        strcpy(this->name, name);
        this->price = price;
    }
};

class Discount {
public:
    virtual float getPrice() = 0;
    virtual float getPriceDiscount() = 0;
    virtual void print() = 0;
};

class FoodProduct : public Product, public Discount {
private:
    int calories;

public:
    FoodProduct(char *name = "", float price = 0.0, int calories = 0) : Product(name,price) {
        this->calories = calories;
    }

    float getPrice() {
        return price;
    }

    float getPriceDiscount() {
        if(calories > 500) {
            return price - (price * 0.2);
        }
        else if(calories > 100) {
            return price - (price * 0.1);
        }
        else {
            return price - (price * 0.05);
        }
    }

    void print() {
        cout << "Food Product: " << name << " Calories: " << calories << " Price: " << getPrice()
        << " Price with discount: " << getPriceDiscount() << endl;
    }
};

class DigitalProduct : public Product, public Discount {
private:
    float size;

public:
    DigitalProduct(char *name = "", float price = 0.0, float size = 0.0) : Product(name,price) {
        this->size = size;
    }

    float getPrice() {
        return price;
    }

    float getPriceDiscount() {
        if(size > 1024) {
            return price - (price * 0.3);
        }
        else if(size > 512) {
            return price - (price * 0.15);
        }
        else {
            return price - (price * 0.075);
        }
    }

    void print() {
        cout << "Digital Product: " << name << " Size: " << size << " Price: " << getPrice()
        << " Price with discount: " << getPriceDiscount() << endl;
    }
};

float total_discount(Discount **discountProducts, int n) {
    float sum = 0.0;
    for(int i=0; i<n; i++) {
        sum += discountProducts[i]->getPrice() - discountProducts[i]->getPriceDiscount();
    }

    return sum;
}

int countFoodProducts(Discount **discountProducts, int n) {
    int counter = 0;
    for(int i=0; i<n; i++) {
        FoodProduct *casted = dynamic_cast<FoodProduct *>(discountProducts[i]);
        if(casted != 0) {
            ++counter;
        }
    }
    return counter;
}

int main()
{
    int n;
    cin >> n;

    Discount **discountProducts = new Discount *[n];

    for(int i=0; i<n; i++) {
        char name[30];
        float price, size;
        int calories, type;

        cin>>type; // 0 - food  1 - digital
        if(type == 0) {
            cin>>name>>price>>calories;
            discountProducts[i] = new FoodProduct(name,price,calories);
        }
        else {
            cin>>name>>price>>size;
            discountProducts[i] = new DigitalProduct(name,price,size);
        }
    }

    for(int i=0; i<n; i++) {
        discountProducts[i]->print();
    }

    cout << "Total discount sum of the products: " << total_discount(discountProducts, n) << endl;

    cout << "Total number of Food Products: " << countFoodProducts(discountProducts, n) << endl;
    cout << "Total number of Digital Products: " << n - countFoodProducts(discountProducts, n) << endl;

    return 0;
}
