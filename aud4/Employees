#include <iostream>
#include <cstring>
using namespace std;

class Date {
private:
    int day;
    int month;
    int year;

public:
    Date(int dday = 14, int mmonth = 12, int yyear = 2001) {
        day = dday;
        month = mmonth;
        year = yyear;
    }

    Date(const Date & date) {
        day = date.day;
        month = date.month;
        year = date.year;
    }

    ~Date() {
    }

    int getDay() {
        return day;
    }

    int getMonth() {
        return month;
    }

    int getYear() {
        return year;
    }

    void printDate() {
        cout<<day<<"."<<month<<"."<<year<<endl;
    }
};

class Employee {
private:
    char name[20];
    int salary;
    Date dateofbirth;

public:
    Employee() {
        strcpy(name,"Nikola");
        salary = 20000;
    }

    Employee(char * nname, int ssalary, Date ddateofbirth) {
        strcpy(name,nname);
        salary = ssalary;
        dateofbirth = ddateofbirth;
    }

    Employee(const Employee & employee) {
        strcpy(name,employee.name);
        salary = employee.salary;
        dateofbirth = employee.dateofbirth;
    }

    ~Employee() {
    }

    int getSalary() {
        return salary;
    }

    Date getDateofBirth() {
        return dateofbirth;
    }

    void printEmployee() {
        cout<<name<<' '<<salary<<' ';
        dateofbirth.printDate();
    }
};

Employee max_salary(Employee * employees, int n)
{
    int max_salary;
    int max_position;

    max_salary = employees[0].getSalary();
    max_position = 0;

    for(int i=1; i<n; i++) {
        if(max_salary < employees[i].getSalary()) {
            max_salary  = employees[i].getSalary();
            max_position = i;
        }
    }

    return employees[max_position];
}

int compare(Date d1, Date d2)
{
    if(d1.getYear() > d2.getYear())
    {
        return 1;
    }
    else if(d1.getYear() < d2.getYear())
    {
        return -1;
    }
    else {
        if(d1.getMonth() > d2.getMonth())
        {
            return 1;
        }
        else if(d1.getMonth() < d2.getMonth())
        {
            return -1;
        }
        else {
            if(d1.getDay() > d2.getDay())
            {
                return 1;
            }
            else if(d1.getDay() < d2.getDay())
            {
                return -1;
            }
            else {
                return 0;
            }
        }
    }
}

Employee youngest_employee(Employee * employees, int n)
{
    Date min_employee = employees[0].getDateofBirth();
    int min_position = 0;

    for(int i=1; i<n; i++)
    {
        if(compare(min_employee,employees[i].getDateofBirth()) == -1)
           {
               min_employee = employees[i].getDateofBirth();
               min_position = i;
           }
    }

    return employees[min_position];
}

int main()
{
    int day,month,year;

    char name[20];
    int salary;

    Employee employees[50];

    int n;
    cin>>n;
    for(int i=0; i<n; i++) {
        cin>>day>>month>>year;
        Date date(day,month,year);

        cin>>name>>salary;
        employees[i] = Employee(name,salary,date);
    }

    cout<<endl;
    max_salary(employees,n).printEmployee();

    cout<<endl;
    youngest_employee(employees,n).printEmployee();

    return 0;
}
