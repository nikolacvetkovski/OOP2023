#include <iostream>
#include <cstring>

using namespace std;

class Game {
protected:
    char title[50];

public:
    Game(char *title = "") {
        strcpy(this->title, title);
    }

    virtual void displayInfo() = 0;
    virtual int complexity() = 0;
};

class BoardGame : virtual public Game {
protected:
    int numofPlayers;

public:
    BoardGame(char *title = "", int numofPlayers = 0) : Game(title) {
        this->numofPlayers = numofPlayers;
    }

    int complexity() {
        if(numofPlayers > 6) {
            return 10;
        }
        else if(numofPlayers >= 3 && numofPlayers <= 6) {
            return 5;
        }
        else {
            return 3;
        }
    }

    void displayInfo() {
        cout << "Game: " << title << endl;
        cout << "Max Players: " << numofPlayers << endl;
        cout << "Complexity: " << complexity() << endl;
    }
};

class CardGame : virtual public Game {
protected:
    int numCards;

public:
    CardGame(char *title = "", int numCards = 0) : Game(title) {
        this->numCards = numCards;
    }

    int complexity() {
        if(numCards > 20) {
            return 10;
        }
        else if(numCards >= 10 && numCards <= 20) {
            return 5;
        }
        else {
            return 3;
        }
    }

    int getCards() {
        return numCards;
    }

    void displayInfo() {
        cout << "Game: " << title << endl;
        cout << "Number of cards: " << numCards << endl;
        cout << "Complexity: " << complexity() << endl;
    }
};

class BoardCardGame : public BoardGame, public CardGame {
public:
    BoardCardGame(char *title = "", int numofPlayers = 0, int numCards = 0) : BoardGame(title,numofPlayers), CardGame(title,numCards), Game(title) {
    }

    int complexity() {
        return (BoardGame::complexity() + CardGame::complexity()) / 2;
    }

    void displayInfo() {
        cout << "Game: " << title << endl;
        cout << "Complexity: " << complexity() << endl;
    }
};

Game *mostComplexCardGame(Game **games, int n) {
    Game * maxGame = nullptr;
    int maxValue = 0;

    for (int i=0; i<n; i++) {
        CardGame *casted = dynamic_cast<CardGame *>(games[i]);

        if(casted != 0) {
            if(casted->getCards() > maxValue) {
                maxValue = casted->getCards();
                maxGame = casted;
            }
        }
    }

    return maxGame;
}

int main ()
{
    char title [50];
    int maxPlayers;
    int numCards;
    int n;
    int choice;

    cin>>choice;
    if (choice==1)
    {
        cin>>title;
        BoardCardGame boardCardGame(title, 8, 15);
        boardCardGame.displayInfo();
    }
    else {
        cin >> n;
        Game **g = new Game * [n];
        for (int i = 0; i < n; i++) {
            cin >> choice;
            if (choice == 1)
            {
                cin >> title >> maxPlayers;
                g[i] = new BoardGame (title, maxPlayers);
            }
            else {
                cin >> title >> numCards;
                g[i] = new CardGame (title, numCards);
            }
        }
        mostComplexCardGame(g,n)->displayInfo();
    }
    return 0;
}
