#include <iostream>
#include <cstring>

using namespace std;

class Shape {
protected:
    double height;
    double base;

public:
    Shape(double height = 0.0, double base = 0.0) {
        this->height = height;
        this->base = base;
    }

    virtual void print() = 0;
    virtual double volume() = 0;

    double getHeight() {
        return this->height;
    }
};

class Cylinder : public Shape {
public:
    Cylinder(double height = 0.0, double base = 0.0) : Shape(height,base) {}

    double volume() {
        return 3.14 * base * base * height;
    }

    void print() {
        cout << "Cylinder has a volume: " << volume() << endl;
    }

};

class Cone : public Shape {
public:
    Cone(double height = 0.0, double base = 0.0) : Shape(height,base) {}

    double volume() {
        return 1.0/3 * 3.14 * base * base * height;
    }

    void print() {
        cout << "Cone has a volume: " << volume() << endl;
    }

};

class Cuboid : public Shape {
private:
    double secondbase;

public:
    Cuboid(double height = 0.0, double base = 0.0, double secondbase = 0.0) : Shape(height,base) {
        this->secondbase = secondbase;
    }

    double volume() {
        return base * secondbase * height;
    }

    void print() {
        cout << "Cuboid has a volume: " << volume() << endl;
    }
};

void shapeWithBiggestVolume(Shape **shapes, int n) {
    Shape *maxShape = shapes[0];
    double maxVolume = shapes[0]->volume();

    for(int i=1; i<n; i++) {
        if(shapes[i]->volume() > maxVolume) {
            maxVolume = shapes[i]->volume();
            maxShape = shapes[i];
        }
    }

    maxShape->print();
}

int shapesWithoutCircleBase(Shape **shapes, int n) {
    int counter = 0;
    for(int i=0; i<n; i++) {
        Cuboid *castedCuboid = dynamic_cast<Cuboid *>(shapes[i]);
        if(castedCuboid != nullptr) {
            ++counter;
        }
    }
    return counter;
}

int main()
{
    int n;
    cin >> n;

    Shape **shapes = new Shape * [n];

    for(int i=0; i<n; i++) {
        double height, base, secondbase;
        int type;

        cin>>type>>height>>base; //0-cylinder, 1-cone, 2-cuboid
        if(type == 0) {
            shapes[i] = new Cylinder(height,base);
        }
        else if(type == 1) {
            shapes[i] = new Cone(height,base);
        }
        else {
            cin>>secondbase;
            shapes[i] = new Cuboid(height,base,secondbase);
        }
    }

    /*for(int i=0; i<n; i++) {
        shapes[i]->print();
    }*/

    shapeWithBiggestVolume(shapes,n);
    cout << "The number of shapes without a circle base is: " << shapesWithoutCircleBase(shapes,n) << endl;

    return 0;
}
