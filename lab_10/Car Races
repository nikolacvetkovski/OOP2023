#include<iostream>
#include<cstring>
using namespace std;

class InvalidTimeException {
private:
    float invalidBestTime;

public:
    InvalidTimeException(float invalidBestTime = 0.0) {
        this->invalidBestTime = invalidBestTime;
    }

    void print() {
        cout << "The time is not valid" << endl;
    }
};

class Race {
protected:
    char cityName[40];
    int yearOfRace;
    int monthOfRace;
    float bestTime;
    float lenghtInKM;

public:
    Race(char *cityName = "", int yearOfRace = 0, int monthOfRace = 0, float bestTime = 0.0, float lenghtInKM = 0.0) {
        strcpy(this->cityName, cityName);
        this->yearOfRace = yearOfRace;
        this->monthOfRace = monthOfRace;
        this->bestTime = bestTime;
        this->lenghtInKM = lenghtInKM;
    }

    virtual float heaviness() {
        return bestTime / lenghtInKM;
    }

    friend ostream &operator<< (ostream &out, Race &other) {
        out << other.cityName << ' ' << other.monthOfRace << "." << other.yearOfRace << ' ' << other.heaviness() << endl;

        return out;
    }
};

class CarRace : public Race {
private:
    float *bestTimes;
    int n;
    int numOfLaps;
    static float CAR_COEF;

public:
    CarRace(char *cityName = "", int yearOfRace = 0, int monthOfRace = 0, float bestTime = 0.0, float lenghtInKM = 0.0,
            float *bestTimes = 0, int n = 0, int numOfLaps = 0) : Race(cityName,yearOfRace,monthOfRace,bestTime,lenghtInKM) {

        this->n = n;
        this->bestTimes = new float [n];

        for(int i=0; i<this->n; i++) {
            this->bestTimes[i] = bestTimes[i];
        }

        this->numOfLaps = numOfLaps;
    }

    ~CarRace() {
        delete[] bestTimes;
    }

    static void setKoeficient(float newKoef) {
        CAR_COEF = newKoef;
    }

    float average() {
        float sum = 0.0;

        for(int i=0; i<n; i++) {
            sum += bestTimes[i];
        }
        return (float) sum / n;
    }

    float heaviness() { //45.882 9.376
        float baseTime = Race::heaviness();
        float averageTime = average();
        float totalTime = baseTime + (averageTime * CarRace::CAR_COEF);

        if(numOfLaps > 15) {
            return totalTime + (totalTime * 0.1);
        }

        return totalTime;
    }

    friend ostream &operator<< (ostream &out, CarRace &other) {
        out << other.cityName << ' ' << other.monthOfRace << "." << other.yearOfRace << ' ' << other.heaviness() << endl;

        return out;
    }

    void setNumberLaps(int numOfLaps) {
        this->numOfLaps = numOfLaps;
    }

    CarRace &operator+= (float newBestTime) {
        if(newBestTime < 10) {
            throw InvalidTimeException(newBestTime);
        }

        else if(newBestTime >= 10) {
            float *temp = new float [n+1];

            for(int i=0; i<n; i++) {
                temp[i] = bestTimes[i];
            }
            temp[n++] = newBestTime;
            delete[] bestTimes;
            bestTimes = temp;
            return *this;
        }
    }
};

float CarRace::CAR_COEF = 0.3;

int main(){
    int testCase;
    cin >> testCase;
    char city[50];
    int year;
    int month;
    float bestTime;
    float length;
    float bestTimes[50];
    int n;
    int m;
    int izbor;
    int numberLaps;

    if (testCase == 1){
        cout << "===== Testiranje na klasite ======" << endl;
        cin >> city;
        cin >> year;
        cin >> month;
        cin >> bestTime;
        cin>>length;
        Race t(city, year, month, bestTime, length);
        cout<<t;
        cin >> city;
        cin >> year;
        cin >> month;
        cin >> bestTime;
        cin>>length;
        cin>>numberLaps;
        cin>>n;
        for (int j = 0; j < n; j++)
            cin >> bestTimes[j];
        CarRace mgt(city, year, month, bestTime, length, bestTimes, n, numberLaps);
        cout << mgt;
        CarRace mgt2;
    }

    if (testCase == 2){
        cout << "===== Testiranje na operatorot += ======" << endl;
        Race **niza;
        cin >> m;
        niza = new Race *[m];
        for (int i = 0; i<m; i++){
            cin >> izbor;
            cin >> city;
            cin >> year;
            cin >> month;
            cin >> bestTime;
            cin >>length;
            if (izbor == 1){
                niza[i] = new Race(city, year, month, bestTime, length);
            }
            else{
                cin>>numberLaps;
                cin>>n;
                for (int j = 0; j < n; j++)
                    cin >> bestTimes[j];
                niza[i] = new CarRace(city, year, month, bestTime, length, bestTimes, n, numberLaps);
            }
        }
        // pecatenje na site Trki
        cout << "\nLista na site Trki:\n";
        for (int i = 0; i < m; i++)
            cout << *niza[i];

        // dodavanje novo najdobro vreme za prvata CarRace
        float best;
        cin >> best;
        int flag = 1;
        for (int i = 0; i < m; i++){
            CarRace* nn = dynamic_cast<CarRace*>(niza[i]);
            if (nn != 0){
                flag = 0;
                try {
                    (*nn) += best;
                    break;
                }
                catch (InvalidTimeException e) {
                    e.print();
                }
            }
        }

        // pecatenje na site Trki
        cout << "\nLista na site Trki:\n";
        for (int i = 0; i < m; i++)
            cout << *niza[i];
    }
    if (testCase == 3){
        cout << "===== Testiranje na isklucoci ======" << endl;
        cin >> city;
        cin >> year;
        cin >> month;
        cin >> bestTime;
        cin>>length;
        cin>>numberLaps;
        CarRace mgt(city, year, month, bestTime, length);
        mgt.setNumberLaps(numberLaps);
        float vreme1,vreme2;
        cin>>vreme1>>vreme2;
        try{
            mgt+=vreme1;
            mgt+=vreme2;
        }
        catch(InvalidTimeException e)
        {
            e.print();
        }
        cout<<mgt;
    }

    if (testCase == 5){
        cout << "===== Testiranje na static clenovi ======" << endl;
        Race **niza;
        cin >> m;
        niza = new Race *[m];
        for (int i = 0; i<m; i++){
            cin >> izbor;
            cin >> city;
            cin >> year;
            cin >> month;
            cin >> bestTime;
            cin >>length;
            if (izbor == 1){
                niza[i] = new Race(city, year, month, bestTime, length);
            }
            else{
                cin>>numberLaps;
                cin>>n;
                for (int j = 0; j < n; j++)
                    cin >> bestTimes[j];
                niza[i] = new CarRace(city, year, month, bestTime, length, bestTimes, n, numberLaps);
            }
        }
        // pecatenje na site Trki
        cout << "\nLista na site Trki:\n";
        for (int i = 0; i < m; i++)
            cout << *niza[i];

        CarRace::setKoeficient(0.7);
        // pecatenje na site Trki
        cout << "\nLista na site Trki:\n";
        for (int i = 0; i < m; i++)
            cout << *niza[i];
    }

    return 0;
}
