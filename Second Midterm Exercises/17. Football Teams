#include <iostream>
#include <cstring>

using namespace std;

class FudbalskaEkipa {
protected:
    char imeTrener[100];
    char imeEkipa[100];
    int brGolovi[10];

public:
    FudbalskaEkipa(char *imeTrener = "", int *brGolovi = 0) {
        strcpy(this->imeTrener, imeTrener);

        for(int i=0; i<10; i++) {
            this->brGolovi[i] = brGolovi[i];
        }
    }

    virtual int uspeh() = 0;
    virtual char *getImeEkipa() = 0;

    friend ostream &operator<< (ostream &out, FudbalskaEkipa &other) {
        out << other.getImeEkipa() << endl << other.imeTrener << endl << other.uspeh() << endl;
        return out;
    }

    FudbalskaEkipa &operator+= (int number){
        int temp[10], n = 0;
        for(int i=1; i<10; i++) {
            temp[n++] = brGolovi[i];
        }
        temp[n++] = number;
        for(int i=0; i<10; i++) {
            brGolovi[i] = temp[i];
        }
        return *this;
    }

    int getVkGolovi() {
        int sum = 0;

        for(int i=0; i<10; i++) {
            sum += brGolovi[i];
        }
        return sum;
    }

    bool operator> (FudbalskaEkipa &other) {
        return this->uspeh() > other.uspeh();
    }
};

class Klub : public FudbalskaEkipa {
private:
    char imeKlub[100];
    int brTituli;

public:
    Klub(char *imeTrener = "", int *brGolovi = 0, char *imeKlub = "", int brTituli = 0) : FudbalskaEkipa(imeTrener, brGolovi) {
        strcpy(this->imeKlub, imeKlub);
        this->brTituli = brTituli;
    }

    char *getImeEkipa() {
        return imeKlub;
    }

    int uspeh() {
        return (getVkGolovi() * 3) + (brTituli * 1000);
    }
};

class Reprezentacija : public FudbalskaEkipa {
private:
    char imeDrzava[100];
    int brNastani;

public:
    Reprezentacija(char *imeTrener = "", int *brGolovi = 0, char *imeDrzava = "", int brNastani = 0) : FudbalskaEkipa(imeTrener, brGolovi) {
        strcpy(this->imeDrzava, imeDrzava);
        this->brNastani = brNastani;
    }

    char *getImeEkipa() {
        return imeDrzava;
    }

    int uspeh() {
        return (getVkGolovi() * 3) + (brNastani * 50);
    }
};

void najdobarTrener(FudbalskaEkipa **ekipi, int n) {
    FudbalskaEkipa *maxEkipa = ekipi[0];
    for(int i=1; i<n; i++) {
        if(*ekipi[i] > *maxEkipa) {
            maxEkipa = ekipi[i];
        }
    }
    cout << *maxEkipa;
}

int main() {
    int n;
    cin >> n;
    FudbalskaEkipa **ekipi = new FudbalskaEkipa*[n];
    char coach[100];
    int goals[10];
    char x[100];
    int tg;
    for (int i = 0; i < n; ++i) {
        int type;
        cin >> type;
        cin.getline(coach, 100);
        cin.getline(coach, 100);
        for (int j = 0; j < 10; ++j) {
            cin >> goals[j];
        }
        cin.getline(x, 100);
        cin.getline(x, 100);
        cin >> tg;
        if (type == 0) {
            ekipi[i] = new Klub(coach, goals, x, tg);
        } else if (type == 1) {
            ekipi[i] = new Reprezentacija(coach, goals, x, tg);
        }
    }
    cout << "===== SITE EKIPI =====" << endl;
    for (int i = 0; i < n; ++i) {
        cout << *ekipi[i];
    }
    cout << "===== DODADI GOLOVI =====" << endl;
    for (int i = 0; i < n; ++i) {
        int p;
        cin >> p;
        cout << "dodavam golovi: " << p << endl;
        *ekipi[i] += p;
    }
    cout << "===== SITE EKIPI =====" << endl;
    for (int i = 0; i < n; ++i) {
        cout << *ekipi[i];
    }
    cout << "===== NAJDOBAR TRENER =====" << endl;
    najdobarTrener(ekipi, n);
    for (int i = 0; i < n; ++i) {
        delete ekipi[i];
    }
    delete [] ekipi;
    return 0;
}
