#include<iostream>
#include<cstring>
#define MAX 50
using namespace std;

class UserExistsException {
public:

    void print() {
        cout << "The user already exists in the list!" << endl;
    }
};

enum typeC {
    standard = 0,
    loyal = 1,
    vip = 2
};

class Customer {
private:
    char name[50];
    char email[50];
    typeC customer;
    static float baseDiscount;
    const static float additionalDiscount;
    int numOfProducts;

public:
    Customer(const char *name = "", const char *email = "", typeC customer = standard, int numOfProducts = 0) {
        strcpy(this->name, name);
        strcpy(this->email, email);
        this->customer = (typeC) customer;
        this->numOfProducts = numOfProducts;
    }

    friend ostream &operator<< (ostream &out, Customer &other) {
        out << other.name << endl;
        out << other.email << endl;
        out << other.numOfProducts << endl;
        if(other.customer == 0) {
            out << "standard 0" << endl;
        }
        else if(other.customer == 1) {
            out << "loyal " << other.baseDiscount <<endl;
        }
        else {
            out << "vip " << other.additionalDiscount << endl;
        }

        return out;
    }

    bool operator== (Customer &other) {
        return strcmp(this->email, other.email) == 0;
    }

    void setTypeCustomer(typeC newCustomer) {
        customer = (typeC)newCustomer;
    }

    int getTypeCustomer() {
        return customer;
    }

    int getNumOfProducts() {
        return numOfProducts;
    }
    
    void static setDiscount1(int number) {
        baseDiscount = number;
    }
};

class FINKI_bookstore {
private:
    Customer *customers;
    int n;

public:
    FINKI_bookstore(Customer *customers = 0, int n = 0) {
        this->n = n;
        this->customers = new Customer [n];

        for(int i=0; i<n; i++) {
            this->customers[i] = customers[i];
        }
    }

    FINKI_bookstore(const FINKI_bookstore &other) {
        this->n = other.n;
        this->customers = new Customer [other.n];

        for(int i=0; i<other.n; i++) {
            this->customers[i] = other.customers[i];
        }
    }

    FINKI_bookstore &operator= (const FINKI_bookstore &other) {
        if(this != &other) {
            delete[] customers;

            this->n = other.n;
            this->customers = new Customer [other.n];

            for(int i=0; i<other.n; i++) {
                this->customers[i] = other.customers[i];
            }
        }
        return *this;
    }

    ~FINKI_bookstore() {
        delete[] customers;
    }

    FINKI_bookstore &operator+= (Customer &other) {
        for(int i=0; i<n; i++) {
            if(customers[i] == other) {
                throw UserExistsException();
            }
        }

        Customer *temp = new Customer [n + 1];
        for(int i=0; i<n; i++) {
            temp[i] = customers[i];
        }
        temp[n++] = other;
        delete[] customers;
        customers = temp;
        return *this;
    }
    
    void setCustomers(Customer *array, int newN)
    {
        delete[]customers;
        customers=new Customer[newN];
        for(int i=0;i<newN;i++)
        {
            customers[i]=array[i];
        }
        n=newN;
    }

    void update() {
        for(int i=0; i<n; i++) {
            if(customers[i].getTypeCustomer() == 0 && customers[i].getNumOfProducts() > 5) {
                customers[i].setTypeCustomer(typeC(1));
            }
            else if(customers[i].getTypeCustomer() == 1 && customers[i].getNumOfProducts() > 10) {
                customers[i].setTypeCustomer(typeC(2));
            }
        }
    }

    friend ostream &operator<< (ostream &out, const FINKI_bookstore &other) {
        for(int i=0; i<other.n; i++) {
            out << other.customers[i];
        }
        return out;
    }
};

float Customer::baseDiscount = 10;
const float Customer::additionalDiscount = 30;

int main(){
  int testCase;
  cin >> testCase;

  char name[MAX];
  char email[MAX];
  int tC;
  int discount;
  int numProducts;


  if (testCase == 1){
    cout << "===== Test Case - Customer Class ======" << endl;
    cin.get();
    cin.getline(name,MAX);
    cin.getline(email,MAX);
    cin >> tC;
    cin >> numProducts;
    cout << "===== CONSTRUCTOR ======" << endl;
    Customer c(name, email, (typeC) tC, numProducts);
    cout << c;

  }

  if (testCase == 2){
    cout << "===== Test Case - Static Members ======" << endl;
    cin.get();
    cin.getline(name,MAX);
    cin.getline(email,MAX);
    cin >> tC;
    cin >> numProducts;
    cout << "===== CONSTRUCTOR ======" << endl;
    Customer c(name, email, (typeC) tC, numProducts);
    cout << c;

    c.setDiscount1(5);

    cout << c;
  }

  if (testCase == 3){
    cout << "===== Test Case - FINKI-bookstore ======" << endl;
    FINKI_bookstore fc;
    int n;
    cin >> n;
    Customer customers[MAX];
    for(int i = 0; i < n; ++i) {
      cin.get();
      cin.getline(name,MAX);
      cin.getline(email,MAX);
      cin >> tC;
      cin >> numProducts;
      Customer c(name, email, (typeC) tC, numProducts);
      customers[i] = c;
    }

    fc.setCustomers(customers, n);

    cout << fc <<endl;
  }

  if (testCase == 4){
    cout << "===== Test Case - operator+= ======" << endl;
    FINKI_bookstore fc;
    int n;
    cin >> n;
    Customer customers[MAX];
    for(int i = 0; i < n; ++i) {
      cin.get();
      cin.getline(name,MAX);
      cin.getline(email,MAX);
      cin >> tC;
      cin >> numProducts;
      Customer c(name, email, (typeC) tC, numProducts);
      customers[i] = c;
    }

    fc.setCustomers(customers, n);
    cout << "OPERATOR +=" << endl;
    cin.get();
    cin.getline(name,MAX);
    cin.getline(email,MAX);
    cin >> tC;
    cin >> numProducts;
    Customer c(name, email, (typeC) tC, numProducts);
    
   try {
        fc+=c;
    }
    catch(UserExistsException u) {
        u.print();
    }

    cout << fc;
  }

  if (testCase == 5){
    cout << "===== Test Case - operator+= (exception) ======" << endl;
    FINKI_bookstore fc;
    int n;
    cin >> n;
    Customer customers[MAX];
    Customer temp;
    for(int i = 0; i < n; ++i) {
      cin.get();
      cin.getline(name,MAX);
      cin.getline(email,MAX);
      cin >> tC;
      cin >> numProducts;
      Customer c(name, email, (typeC) tC, numProducts);
      customers[i] = c;
      temp = c;
    }

    fc.setCustomers(customers, n);
    cout << "OPERATOR +=" << endl;
    cin.get();
    cin.getline(name,MAX);
    cin.getline(email,MAX);
    cin >> tC;
    cin >> numProducts;
    
    try {
        fc+=temp;
    }
    
    catch(UserExistsException e) {
        e.print();
    }
    
    cout << fc;
  }

  if (testCase == 6){
    cout << "===== Test Case - update method  ======" << endl << endl;
    FINKI_bookstore fc;
    int n;
    cin >> n;
    Customer customers[MAX];
    for(int i = 0; i < n; ++i) {
      cin.get();
      cin.getline(name,MAX);
      cin.getline(email,MAX);
      cin >> tC;
      cin >> numProducts;
      Customer c(name, email, (typeC) tC, numProducts);
      customers[i] = c;
    }

    fc.setCustomers(customers, n);

    cout << "Update:" << endl;
    fc.update();
    cout << fc;
  }
  return 0;
}
