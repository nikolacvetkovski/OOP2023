#include <iostream>
#include <cstring>
#include <cmath>

using namespace std;

class SMS {
protected:
    float osnovnaCena;
    char pretplatnickiBroj[14];
    const static float DANOK;

public:
    SMS(char *pretplatnickiBroj = "", float osnovnaCena = 0.0) {
        this->osnovnaCena = osnovnaCena;
        strcpy(this->pretplatnickiBroj, pretplatnickiBroj);
    }

    virtual float cena() = 0;

    const float getDanok() {
        return SMS::DANOK;
    }

    friend ostream &operator<< (ostream &out, SMS &other) {
        out << "Tel: " << other.pretplatnickiBroj << " - cena: " << other.cena() << "den." << endl;

        return out;
    }
};

const float SMS::DANOK = 0.18;

class RegularSMS : public SMS {
private:
    char tekst[1000];
    bool daliRoaming;
    static float REGULAR_DANOK;

public:
    RegularSMS(char *pretplatnickiBroj = "", float osnovnaCena = 0.0, char *tekst = "", bool daliRoaming = true) : SMS(pretplatnickiBroj,osnovnaCena) {
        strcpy(this->tekst, tekst);
        this->daliRoaming = daliRoaming;
    }

    float cena() {
         if(daliRoaming == true) {
            return osnovnaCena * (1.0 + RegularSMS::REGULAR_DANOK) * ceil(strlen(tekst) / 160.0);
         }
         else {
            return osnovnaCena * (1.0 + SMS::DANOK) * ceil(strlen(tekst) / 160.0);
         }
    }

    static void set_rProcent(int newProcent) {
        RegularSMS::REGULAR_DANOK = newProcent / 100.0;
    }
};

float RegularSMS::REGULAR_DANOK = 3.0;

class SpecialSMS : public SMS {
private:
    bool daliHumanitarniCeli;
    static float SPECIAL_DANOK;

public:
    SpecialSMS(char *pretplatnickiBroj = "", float osnovnaCena = 0.0, bool daliHumanitarniCeli = true) : SMS(pretplatnickiBroj,osnovnaCena) {
        this->daliHumanitarniCeli = daliHumanitarniCeli;
    }

    float cena() {
        if(daliHumanitarniCeli == true) {
            return osnovnaCena;
        }
        else {
            return osnovnaCena * (1 + SpecialSMS::SPECIAL_DANOK);
        }
    }

    static void set_sProcent(int newProcent) {
        SpecialSMS::SPECIAL_DANOK = newProcent / 100.0;
    }
};

float SpecialSMS::SPECIAL_DANOK = 1.5;

void vkupno_SMS(SMS** poraka, int n) {
    int regcounter = 0, speccounter  = 0;
    float regVkCena = 0, specVkCena = 0;

    for(int i=0; i<n; i++) {
        RegularSMS *reg = dynamic_cast<RegularSMS *>(poraka[i]);
        if(reg != 0) {
            regcounter++;
            regVkCena += poraka[i]->cena();
        }
        else {
            speccounter++;
            specVkCena += poraka[i]->cena();
        }
    }

    cout << "Vkupno ima " << regcounter << " regularni SMS poraki i nivnata cena e: " << regVkCena << endl;
    cout << "Vkupno ima " << speccounter << " specijalni SMS poraki i nivnata cena e: " << specVkCena << endl;
}

int main()
{
    char tel[20], msg[1000];
    float cena;
    float price;
    int p;
    bool roam, hum;
    SMS  **sms;
    int n;
    int tip;

    int testCase;
    cin >> testCase;

    if (testCase == 1){
        cout << "====== Testing RegularSMS class ======" << endl;
        cin >> n;
        sms = new SMS *[n];

        for (int i = 0; i < n; i++){
            cin >> tel;
            cin >> cena;
            cin.get();
            cin.getline(msg, 1000);
            cin >> roam;
            cout << "CONSTRUCTOR" << endl;
            sms[i] = new RegularSMS(tel, cena, msg, roam);
            cout << "OPERATOR <<" << endl;
            cout << *sms[i];
        }
        for (int i = 0; i<n; i++) delete sms[i];
        delete[] sms;
    }
    if (testCase == 2){
        cout << "====== Testing SpecialSMS class ======" << endl;
        cin >> n;
        sms = new SMS *[n];

        for (int i = 0; i < n; i++){
            cin >> tel;
            cin >> cena;
            cin >> hum;
            cout << "CONSTRUCTOR" << endl;
            sms[i] = new SpecialSMS(tel, cena, hum);
            cout << "OPERATOR <<" << endl;
            cout << *sms[i];
        }
        for (int i = 0; i<n; i++) delete sms[i];
        delete[] sms;
    }
    if (testCase == 3){
        cout << "====== Testing method vkupno_SMS() ======" << endl;
        cin >> n;
        sms = new SMS *[n];

        for (int i = 0; i<n; i++){

            cin >> tip;
            cin >> tel;
            cin >> cena;
            if (tip == 1) {

                cin.get();
                cin.getline(msg, 1000);
                cin >> roam;

                sms[i] = new RegularSMS(tel, cena, msg, roam);

            }
            else {
                cin >> hum;

                sms[i] = new SpecialSMS(tel, cena, hum);
            }
        }

        vkupno_SMS(sms, n);
        for (int i = 0; i<n; i++) delete sms[i];
        delete[] sms;
    }
    if (testCase == 4){
        cout << "====== Testing RegularSMS class with a changed percentage======" << endl;
        SMS *sms1, *sms2;
        cin >> tel;
        cin >> cena;
        cin.get();
        cin.getline(msg, 1000);
        cin >> roam;
        sms1 = new RegularSMS(tel, cena, msg, roam);
        cout << *sms1;

        cin >> tel;
        cin >> cena;
        cin.get();
        cin.getline(msg, 1000);
        cin >> roam;
        cin >> p;
        RegularSMS::set_rProcent(p);
        sms2 = new RegularSMS(tel, cena, msg, roam);
        cout << *sms2;

        delete sms1, sms2;
    }
    if (testCase == 5){
        cout << "====== Testing SpecialSMS class with a changed percentage======" << endl;
        SMS *sms1, *sms2;
        cin >> tel;
        cin >> cena;
        cin >> hum;
        sms1 = new SpecialSMS(tel, cena, hum);
        cout << *sms1;

        cin >> tel;
        cin >> cena;
        cin >> hum;
        cin >> p;
        SpecialSMS::set_sProcent(p);
        sms2 = new SpecialSMS(tel, cena, hum);
        cout << *sms2;

        delete sms1, sms2;
    }

    return 0;
}
