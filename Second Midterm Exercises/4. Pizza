#include <iostream>
#include <cstring>

using namespace std;

enum Golemina {
    mala = 0,
    golema = 1,
    familijarna = 2
};

class Pizza {
protected:
    char name[20];
    char ingredients[100];
    float basePrice;

public:
    Pizza(const char *name = "", const char *ingredients = "", float basePrice = 0) {
        strcpy(this->name, name);
        strcpy(this->ingredients, ingredients);
        this->basePrice = basePrice;
    }

    virtual float calculate_price() {
        return basePrice;
    }

    char *getName() {
        return name;
    }

    char *getIngredients() {
        return ingredients;
    }

    bool operator< (Pizza &other) {
        return this->calculate_price() < other.calculate_price();
    }
};

class FlatPizza : public Pizza {
private:
    Golemina golemina;

public:
    FlatPizza(const char *name = "", const char *ingredients = "", float basePrice = 0, Golemina golemina = mala) : Pizza(name,ingredients,basePrice) {
        this->golemina = (Golemina) golemina;
    }

    float calculate_price() {
        if(golemina == 0) {
            return Pizza::calculate_price() * 1.1;
        }
        else if(golemina == 1) {
            return Pizza::calculate_price() * 1.2;
        }
        else {
            return Pizza::calculate_price() * 1.3;
        }
    }

    friend ostream &operator<< (ostream &out, FlatPizza &other) {
        out << other.getName() << ": " << other.getIngredients() << ", ";

        if(other.golemina == 0) {
            out << "small ";
        }
        else if(other.golemina == 1) {
            out << "big ";
        }
        else {
            out << "family ";
        }

        out << "- " << other.calculate_price() << endl;
        return out;
    }
};

class FoldedPizza : public Pizza {
private:
    bool isWhiteFlour;

public:
    FoldedPizza(const char *name = "", const char *ingredients = "", float basePrice = 0, bool isWhiteFlour = true) : Pizza(name,ingredients,basePrice) {
        this->isWhiteFlour = isWhiteFlour;
    }

    float calculate_price() {
        if(isWhiteFlour == true) {
            return Pizza::calculate_price() * 1.1;
        }
        return Pizza::calculate_price() * 1.3;
    }

    friend ostream &operator<< (ostream &out, FoldedPizza &other) {
        out << other.getName() << ": " << other.getIngredients() << ", ";

        if(other.isWhiteFlour) {
            out << "wf - " << other.calculate_price() << endl;
        }
        else {
            out << "nwf - " << other.calculate_price() << endl;
        }

        return out;
    }

    void setWhiteFlour(bool newWhiteFlour) {
        this->isWhiteFlour = newWhiteFlour;
    }
};

void expensivePizza(Pizza **pizzas, int n) {
    Pizza *max_pizza = pizzas[0];

    for(int i=1; i<n; i++) {
        if(*max_pizza < *pizzas[i]) {
            max_pizza = pizzas[i];
        }
    }

    FoldedPizza *casted1 = dynamic_cast<FoldedPizza *>(max_pizza);
        if(casted1 != 0) {
            cout << *casted1;
        }

        else {
            FlatPizza *casted2 = dynamic_cast<FlatPizza *>(max_pizza);
            cout << *casted2;
    }
}

int main() {
  int test_case;
  char name[20];
  char ingredients[100];
  float inPrice;
  Golemina golemina;
  bool whiteFlour;

  cin >> test_case;
  if (test_case == 1) {
    // Test Case FlatPizza - Constructor, operator <<, price
    cin.get();
    cin.getline(name,20);
    cin.getline(ingredients,100);
    cin >> inPrice;
    FlatPizza fp(name, ingredients, inPrice);
    cout << fp;
  } else if (test_case == 2) {
    // Test Case FlatPizza - Constructor, operator <<, price
    cin.get();
    cin.getline(name,20);
    cin.getline(ingredients,100);
    cin >> inPrice;
    int s;
    cin>>s;
    FlatPizza fp(name, ingredients, inPrice, (Golemina)s);
    cout << fp;

  } else if (test_case == 3) {
    // Test Case FoldedPizza - Constructor, operator <<, price
    cin.get();
    cin.getline(name,20);
    cin.getline(ingredients,100);
    cin >> inPrice;
    FoldedPizza fp(name, ingredients, inPrice);
    cout << fp;
  } else if (test_case == 4) {
    // Test Case FoldedPizza - Constructor, operator <<, price
    cin.get();
    cin.getline(name,20);
    cin.getline(ingredients,100);
    cin >> inPrice;
    FoldedPizza fp(name, ingredients, inPrice);
    fp.setWhiteFlour(false);
    cout << fp;

  } else if (test_case == 5) {
	// Test Cast - operator <, price
    int s;

    cin.get();
    cin.getline(name,20);
    cin.getline(ingredients,100);
    cin >> inPrice;
    cin>>s;
    FlatPizza *fp1 = new FlatPizza(name, ingredients, inPrice, (Golemina)s);
    cout << *fp1;

    cin.get();
    cin.getline(name,20);
    cin.getline(ingredients,100);
    cin >> inPrice;
    cin>>s;
    FlatPizza *fp2 = new FlatPizza(name, ingredients, inPrice, (Golemina)s);
    cout << *fp2;

    cin.get();
    cin.getline(name,20);
    cin.getline(ingredients,100);
    cin >> inPrice;
    FoldedPizza *fp3 = new FoldedPizza(name, ingredients, inPrice);
    cout << *fp3;

    cin.get();
    cin.getline(name,20);
    cin.getline(ingredients,100);
    cin >> inPrice;
    FoldedPizza *fp4 = new FoldedPizza(name, ingredients, inPrice);
    fp4->setWhiteFlour(false);
    cout << *fp4;

    cout<<"Lower price: "<<endl;
    if(*fp1<*fp2)
        cout<<fp1->calculate_price()<<endl;
    else cout<<fp2->calculate_price()<<endl;

    if(*fp1<*fp3)
        cout<<fp1->calculate_price()<<endl;
    else cout<<fp3->calculate_price()<<endl;

    if(*fp4<*fp2)
        cout<<fp4->calculate_price()<<endl;
    else cout<<fp2->calculate_price()<<endl;

    if(*fp3<*fp4)
        cout<<fp3->calculate_price()<<endl;
    else cout<<fp4->calculate_price()<<endl;

  } else if (test_case == 6) {
	// Test Cast - expensivePizza
    int num_p;
    int pizza_type;

    cin >> num_p;
    Pizza **pi = new Pizza *[num_p];
    for (int j = 0; j < num_p; ++j) {

      cin >> pizza_type;
      if (pizza_type == 1) {
        cin.get();
        cin.getline(name,20);

        cin.getline(ingredients,100);
        cin >> inPrice;
        int s;
        cin>>s;
        FlatPizza *fp = new FlatPizza(name, ingredients, inPrice, (Golemina)s);
        cout << (*fp);
        pi[j] = fp;
      }
      if (pizza_type == 2) {

        cin.get();
        cin.getline(name,20);
        cin.getline(ingredients,100);
        cin >> inPrice;
        FoldedPizza *fp =
            new FoldedPizza (name, ingredients, inPrice);
        if(j%2)
          (*fp).setWhiteFlour(false);
        cout << (*fp);
        pi[j] = fp;

      }
    }

    cout << endl;
    cout << "The most expensive pizza:\n";
    expensivePizza(pi,num_p);
  }
  return 0;
}
