#include <iostream>
#include <cstring>

using namespace std;

enum tip {
    mobile = 0,
    laptop = 1
};

class InvalidProductionDate {
public:
    InvalidProductionDate() {}

    void print() {
        cout << "Невалидна година на производство" << endl;
    }
};

class Device {
private:
    char mobileModel[100];
    tip typeDevice;
    static float BASE_CHECK_TIME;
    int releseYear;

public:
    Device(char *mobileModel = "", tip typeDevice = laptop, int releseYear = 0) {
        strcpy(this->mobileModel, mobileModel);
        this->typeDevice = (tip) typeDevice;
        this->releseYear = releseYear;
    }

    friend ostream &operator<< (ostream &out, Device &other) {
        out << other.mobileModel << endl;;

        if(other.typeDevice == 0) {
            if(other.releseYear > 2015) {
                out << "Mobilen " << Device::BASE_CHECK_TIME + 2 << endl;
            }
            else {
                out << "Mobilen " << Device::BASE_CHECK_TIME << endl;
            }
        }
        else {
            if(other.releseYear > 2015) {
                out << "Laptop " << Device::BASE_CHECK_TIME + 4 << endl;
            }
            else {
                out << "Laptop " << Device::BASE_CHECK_TIME + 2<< endl;
            }
        }
        return out;
    }

    int getReleaseYear() {
        return releseYear;
    }
    
    static void setPocetniCasovi(float newCheckTime) {
        Device::BASE_CHECK_TIME = newCheckTime;
    }
};

class MobileServis {
private:
    char address[100];
    Device *devices;
    int n;

public:
    MobileServis(char *address = "", Device *devices = 0, int n = 0) {
        strcpy(this->address, address);
        this->n = n;
        this->devices = new Device [n];

        for(int i=0; i<n; i++) {
            this->devices[i] = devices[i];
        }
    }

    MobileServis(const MobileServis &other) {
        strcpy(this->address, other.address);
        this->n = other.n;
        this->devices = new Device [other.n];

        for(int i=0; i<other.n; i++) {
            this->devices[i] = other.devices[i];
        }
    }

    MobileServis &operator= (const MobileServis &other) {
        if(this != &other) {
            delete[] devices;

            strcpy(this->address, other.address);
            this->n = other.n;
            this->devices = new Device [other.n];

            for(int i=0; i<other.n; i++) {
                this->devices[i] = other.devices[i];
            }
        }
        return *this;
    }

    ~MobileServis() {
        delete[] devices;
    }

    MobileServis &operator+= (Device &other) {
        if(other.getReleaseYear() > 2019 || other.getReleaseYear() < 2000) {
            throw InvalidProductionDate();
        }
        else {
            Device *temp = new Device[n + 1];
            for(int i=0; i<n; i++) {
                temp[i] = devices[i];
            }
            temp[n++] = other;
            delete[] devices;
            devices = temp;
            return *this;
        }
    }

    void pecatiCasovi() {
        cout << "Ime: " << address << endl;
        for(int i=0; i<n; i++) {
            cout << devices[i];
        }
    }
};

float Device::BASE_CHECK_TIME = 1.0;

int main()
{
	int testCase;
	cin >> testCase;
    char ime[100];
    int tipDevice;
    int godina;
    int n;
    Device devices[50];
	if (testCase == 1){
		cout << "===== Testiranje na klasite ======" << endl;
		cin >> ime;
		cin >> tipDevice;
		cin >> godina;
		Device ig(ime,(tip)tipDevice,godina);
        cin>>ime;
		MobileServis t(ime);
        cout<<ig;
		}
	if (testCase == 2){
		cout << "===== Testiranje na operatorot += ======" << endl;
        cin>>ime;
        cin >> n;
		MobileServis t(ime);
		for(int i=0;i<n;i++)
        {
            cin >> ime;
            cin >> tipDevice;
            cin >> godina;
            Device tmp(ime,(tip)tipDevice,godina);
             try {
                 t+=tmp;
            }
            catch(InvalidProductionDate other) {
                other.print();
            }
        }
        t.pecatiCasovi();
	}
	if (testCase == 3){
		cout << "===== Testiranje na isklucoci ======" << endl;
        cin>>ime;
        cin >> n;
		MobileServis t(ime);
		for(int i=0;i<n;i++)
        {
            cin >> ime;
            cin >> tipDevice;
            cin >> godina;
            Device tmp(ime,(tip)tipDevice,godina);
             try {
                 t+=tmp;
            }
            catch(InvalidProductionDate other) {
                other.print();
            }
        }
        t.pecatiCasovi();
	}
	if (testCase == 4){
		cout <<"===== Testiranje na konstruktori ======"<<endl;
		 cin>>ime;
        cin >> n;
		MobileServis t(ime);
		for(int i=0;i<n;i++)
        {
            cin >> ime;
            cin >> tipDevice;
            cin >> godina;
            Device tmp(ime,(tip)tipDevice,godina);
             try {
                 t+=tmp;
            }
            catch(InvalidProductionDate other) {
                other.print();
            }
        }
        MobileServis t2 = t;
        t2.pecatiCasovi();
	}
	if (testCase == 5){
		cout << "===== Testiranje na static clenovi ======" << endl;
        cin>>ime;
        cin >> n;
		MobileServis t(ime);
		for(int i=0;i<n;i++)
        {
            cin >> ime;
            cin >> tipDevice;
            cin >> godina;
            Device tmp(ime,(tip)tipDevice,godina);

             try {
                 t+=tmp;
            }
            catch(InvalidProductionDate other) {
                other.print();
            }
        }
        t.pecatiCasovi();
        cout << "===== Promena na static clenovi ======" << endl;
		Device::setPocetniCasovi(2);
        t.pecatiCasovi();
	}

		if (testCase == 6){
		cout << "===== Testiranje na kompletna funkcionalnost ======" << endl;
		cin>>ime;
        cin >> n;
		MobileServis t(ime);
		for(int i=0;i<n;i++)
        {
            cin >> ime;
            cin >> tipDevice;
            cin >> godina;
            Device tmp(ime,(tip)tipDevice,godina);
            try {
                 t+=tmp;
            }
            catch(InvalidProductionDate other) {
                other.print();
            }
        }
		Device::setPocetniCasovi(3);
        MobileServis t2 = t;
        t2.pecatiCasovi();
	}
  
	return 0;
}
