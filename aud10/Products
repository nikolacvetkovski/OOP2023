#include <iostream>
#include <cstring>

using namespace std;

class NegativeValueException {
private:
    char productName[50];

public:
    NegativeValueException(char *productName = "") {
        strcpy(this->productName, productName);
    }

    void showMessage() {
        cout << "The product " << productName << " cannot have a negative value for it's price!" << endl;
    }
};

class Discount {
public:
    static double EUR_TO_MKD;
    static double USD_TO_MKD;

    virtual float discount_price() = 0;
    virtual float getPrice() = 0;
    virtual void print_rule() = 0;
};

double Discount::EUR_TO_MKD = 61.5;
double Discount::USD_TO_MKD = 54.4;

class Product {
protected:
    char nameProduct[50];
    float price;

public:
    Product(char *nameProduct = "", float price = 0.0) {
        strcpy(this->nameProduct, nameProduct);
        this->price = price;
    }

    void changePrice(float newPrice) {
        if(newPrice < 0) {
            throw NegativeValueException(this->nameProduct);
        }

        this->price = newPrice;
    }
};

class FoodProduct : public Product, public Discount {
public:
    FoodProduct(char *nameProduct = "", float price = 0.0) : Product(nameProduct,price) {
    }

    float discount_price() {
        return getPrice();
    }

    float getPrice() {
        return price * Discount::EUR_TO_MKD;
    }

    void print_rule() {
        cout << "No discounts for food products!" << endl;
        cout << nameProduct << ' ' << getPrice() << endl;
    }
};

class Drinks : public Product, public Discount {
private:
    bool isAlcohol;
    bool isCocaCola;

public:
    Drinks(char *nameProduct = "", float price = 0.0, bool isAlcohol = false, bool isCocaCola = false) : Product(nameProduct,price) {
        this->isAlcohol = isAlcohol;
        this->isCocaCola = isCocaCola;
    }

    float discount_price() {
        if(isAlcohol && price > 20) {
            return getPrice() * 0.95;
        }
        else if(!isAlcohol && isCocaCola) {
            return getPrice() * 0.9;
        }
        else {
            getPrice();
        }
    }

    float getPrice() {
        return price * Discount::EUR_TO_MKD;
    }

    void print_rule() {
        cout << nameProduct << ' ' << getPrice() << ' ' << "Discount: " << getPrice() - discount_price() << endl;
    }
};

class Cosmetics : public Product, public Discount {
public:
    Cosmetics(char *nameProduct = "", float price = 0.0) : Product(nameProduct,price) {
    }

    float discount_price() {
        float priceInUSD = getPrice() / Discount::USD_TO_MKD;

        if(priceInUSD > 20) {
            return getPrice() * 0.86;
        }

        else if(price > 5) {
            return getPrice() * 0.88;
        }

        else {
            return getPrice();
        }
    }

    float getPrice() {
        return price * Discount::EUR_TO_MKD;
    }

    void print_rule() {
        cout << nameProduct << ' ' << getPrice() << ' ' << "Discount: " << getPrice() - discount_price() << endl;
    }
};

int main()
{
    int n = 0;
    Discount **d = new Discount *[10];
    d[n++] = new FoodProduct("leb", 0.5);
    d[n++] = new Drinks("viski", 22, true, false);
    d[n++] = new FoodProduct("sirenje", 6.2);
    d[n++] = new Drinks("votka", 10, true, false);
    d[n++] = new Cosmetics("krema", 12);
    d[n++] = new Drinks("coca-cola", 1.2, false, true);
    d[n++] = new Cosmetics("parfem", 60);

    for (int i = 0; i < n; i++) {
        cout << i + 1 << endl;
        cout << d[i]->getPrice() << endl;
        cout << d[i]->discount_price() << endl;
        d[i]->print_rule();
    }

    for (int i = 0; i < n; i++) {
        Cosmetics *cosmeticsTrial = dynamic_cast<Cosmetics *>(d[i]);
        if (cosmeticsTrial != 0) {
            int newPrice;
            cin >> newPrice;
            try {
                cosmeticsTrial->changePrice(newPrice);
            }
            catch (NegativeValueException e) {
                e.showMessage();
            }
        }
    }

    for (int i = 0; i < n; i++) {
        cout << i + 1 << endl;
        cout << d[i]->getPrice() << endl;
        cout << d[i]->discount_price() << endl;
        d[i]->print_rule();
    }

    return 0;
}
